services:
  frontend:
    build: 
      context: ./services/frontend
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    depends_on:
      - api
    networks:
      - certmon-network
    environment:
      - NODE_ENV=production

  api:
    build: ./services/api
    expose:
      - "5001"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/certmon
      - REDIS_URL=redis://redis:6379/0
      - FLASK_APP=wsgi.py
      - FLASK_DEBUG=${FLASK_DEBUG:-1}
      - FLASK_ENV=${FLASK_ENV:-development}
      - PYTHONUNBUFFERED=1
      - SECRET_KEY=${SECRET_KEY:-default_secret_key}
    command: ["gunicorn", "--bind", "0.0.0.0:5001", "--log-level", "${LOG_LEVEL:-debug}", "wsgi:app"]
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - certmon-network

  worker:
    build: ./services/worker
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/certmon
      - REDIS_URL=redis://redis:6379/0
      - PYTHONPATH=/app
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    command: ["celery", "-A", "app.celery", "worker", "--loglevel=${LOG_LEVEL:-info}"]
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - certmon-network

  db:
    image: postgres:14
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=certmon
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - certmon-network

  redis:
    image: redis:7
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - certmon-network

networks:
  certmon-network:
    driver: bridge

volumes:
  postgres_data:
