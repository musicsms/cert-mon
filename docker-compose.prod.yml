version: '3.8'

services:
  frontend:
    build:
      context: ./services/frontend
      args:
        - NODE_ENV=production
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=${API_URL}
    depends_on:
      - api
    networks:
      - certmon-network
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  api:
    build:
      context: ./services/api
      args:
        - FLASK_ENV=production
    ports:
      - "${API_PORT:-5001}:5001"
    environment:
      - FLASK_APP=wsgi.py
      - FLASK_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - SECRET_KEY=${SECRET_KEY}
      - CORS_ORIGINS=${CORS_ORIGINS}
    command: ["gunicorn", "--bind", "0.0.0.0:5001", "--workers", "4", "--log-level", "${LOG_LEVEL:-info}", "wsgi:app"]
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - certmon-network
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  worker:
    build:
      context: ./services/worker
      args:
        - FLASK_ENV=production
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      - SSL_VERIFY=${SSL_VERIFY:-true}
      - SSL_CERT_PATH=${SSL_CERT_PATH:-/etc/ssl/certs/ca-certificates.crt}
    command: ["celery", "-A", "app.celery", "worker", "--loglevel=${LOG_LEVEL:-info}", "--concurrency=2"]
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - certmon-network
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure

  db:
    image: postgres:14-alpine
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - certmon-network
    deploy:
      placement:
        constraints:
          - node.role == manager
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - certmon-network
    deploy:
      placement:
        constraints:
          - node.role == manager
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  prometheus:
    image: prom/prometheus:v2.45.0
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    networks:
      - certmon-network
    deploy:
      placement:
        constraints:
          - node.role == manager

  grafana:
    image: grafana/grafana:10.0.0
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    networks:
      - certmon-network
    deploy:
      placement:
        constraints:
          - node.role == manager

networks:
  certmon-network:
    driver: overlay

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
